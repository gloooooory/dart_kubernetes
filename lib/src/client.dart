import 'dart:convert';

import '../api_admissionregistration_v1.dart' as api_admissionregistration_v1;
import '../api_apiserverinternal_v1alpha1.dart'
    as api_apiserverinternal_v1alpha1;
import '../api_apps_v1.dart' as api_apps_v1;
import '../api_authentication_v1.dart' as api_authentication_v1;
import '../api_authorization_v1.dart' as api_authorization_v1;
import '../api_autoscaling_v1.dart' as api_autoscaling_v1;
import '../api_autoscaling_v2beta1.dart' as api_autoscaling_v2beta1;
import '../api_autoscaling_v2beta2.dart' as api_autoscaling_v2beta2;
import '../api_batch_v1.dart' as api_batch_v1;
import '../api_batch_v1beta1.dart' as api_batch_v1beta1;
import '../api_certificates_v1.dart' as api_certificates_v1;
import '../api_coordination_v1.dart' as api_coordination_v1;
import '../api_core_v1.dart' as api_core_v1;
import '../api_discovery_v1.dart' as api_discovery_v1;
import '../api_discovery_v1beta1.dart' as api_discovery_v1beta1;
import '../api_events_v1.dart' as api_events_v1;
import '../api_events_v1beta1.dart' as api_events_v1beta1;
import '../api_flowcontrol_v1beta1.dart' as api_flowcontrol_v1beta1;
import '../api_networking_v1.dart' as api_networking_v1;
import '../api_node_v1.dart' as api_node_v1;
import '../api_node_v1alpha1.dart' as api_node_v1alpha1;
import '../api_node_v1beta1.dart' as api_node_v1beta1;
import '../api_policy_v1.dart' as api_policy_v1;
import '../api_policy_v1beta1.dart' as api_policy_v1beta1;
import '../api_rbac_v1.dart' as api_rbac_v1;
import '../api_rbac_v1alpha1.dart' as api_rbac_v1alpha1;
import '../api_scheduling_v1.dart' as api_scheduling_v1;
import '../api_scheduling_v1alpha1.dart' as api_scheduling_v1alpha1;
import '../api_storage_v1.dart' as api_storage_v1;
import '../api_storage_v1alpha1.dart' as api_storage_v1alpha1;
import '../api_storage_v1beta1.dart' as api_storage_v1beta1;
import '../apimachinery_pkg_version.dart' as apimachinery_pkg_version;
import '../apiextensions__apiserver_pkg_apis_apiextensions_v1.dart'
    as apiextensions__apiserver_pkg_apis_apiextensions_v1;
import '../apimachinery_pkg_apis_meta_v1.dart' as apimachinery_pkg_apis_meta_v1;
import '../kube__aggregator_pkg_apis_apiregistration_v1.dart'
    as kube__aggregator_pkg_apis_apiregistration_v1;

import 'package:http/http.dart' as http;

class KubernetesClient {
  KubernetesClient(String server, this.jwt)
      : _baseUrl = (server + (server.endsWith('/') ? '' : '/')),
        _httpClient = http.Client();

  final String jwt;
  final String _baseUrl;
  final http.Client _httpClient;

  Future<Map<String, dynamic>> _getJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.get(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _getJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.get(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _postJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.post(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _postJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.post(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _putJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.put(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _putJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.put(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _deleteJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.delete(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _deleteJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.delete(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _patchJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.patch(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _patchJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.patch(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<String> _optionsJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.get(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<String> _headJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $jwt'};

    final resp = await _httpClient.head(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  String _getFullUrl(String url) {
    return '$_baseUrl$url';
  }

  /// get service account issuer OpenID configuration, also known as the 'OIDC discovery doc'
  Future<String> getServiceAccountIssuerOpenIDConfiguration() async {
    final result = await _getJsonString('/.well-known/openid-configuration/');
    return result;
  }

  /// get available API versions
  Future<apimachinery_pkg_apis_meta_v1.APIVersions> getCoreAPIVersions() async {
    final result = await _getJsonMap('/api/');
    return apimachinery_pkg_apis_meta_v1.APIVersions.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCoreV1APIResources() async {
    final result = await _getJsonMap('/api/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list objects of kind ComponentStatus
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ComponentStatusList> listCoreV1ComponentStatus({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/componentstatuses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ComponentStatusList.fromJson(result);
  }

  /// read the specified ComponentStatus
  ///
  /// [name] name of the ComponentStatus
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ComponentStatus> readCoreV1ComponentStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/componentstatuses/$name?pretty=$pretty');
    return api_core_v1.ComponentStatus.fromJson(result);
  }

  /// list or watch objects of kind ConfigMap
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ConfigMapList> listCoreV1ConfigMapForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/configmaps?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ConfigMapList.fromJson(result);
  }

  /// list or watch objects of kind Endpoints
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.EndpointsList> listCoreV1EndpointsForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/endpoints?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.EndpointsList.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.EventList> listCoreV1EventForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.EventList.fromJson(result);
  }

  /// list or watch objects of kind LimitRange
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.LimitRangeList> listCoreV1LimitRangeForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/limitranges?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.LimitRangeList.fromJson(result);
  }

  /// list or watch objects of kind Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.NamespaceList> listCoreV1Namespace({
    bool? pretty,
  }) async {
    final result = await _getJsonMap('/api/v1/namespaces?pretty=$pretty');
    return api_core_v1.NamespaceList.fromJson(result);
  }

  /// create a Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> createCoreV1Namespace({
    bool? pretty,
  }) async {
    final result = await _postJsonMap('/api/v1/namespaces?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// create a Binding
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Binding> createCoreV1NamespacedBinding({
    String? dryRun,
    String? fieldManager,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/bindings?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_core_v1.Binding.fromJson(result);
  }

  /// list or watch objects of kind ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMapList> listCoreV1NamespacedConfigMap({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/configmaps?pretty=$pretty');
    return api_core_v1.ConfigMapList.fromJson(result);
  }

  /// delete collection of ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedConfigMap({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/configmaps?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> createCoreV1NamespacedConfigMap({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/configmaps?pretty=$pretty');
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// read the specified ConfigMap
  ///
  /// [name] name of the ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> readCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name?pretty=$pretty');
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// delete a ConfigMap
  ///
  /// [name] name of the ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ConfigMap
  ///
  /// [name] name of the ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> replaceCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name?pretty=$pretty');
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// partially update the specified ConfigMap
  ///
  /// [name] name of the ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> patchCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name?pretty=$pretty');
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// list or watch objects of kind Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.EndpointsList> listCoreV1NamespacedEndpoints({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/endpoints?pretty=$pretty');
    return api_core_v1.EndpointsList.fromJson(result);
  }

  /// delete collection of Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedEndpoints({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/endpoints?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> createCoreV1NamespacedEndpoints({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/endpoints?pretty=$pretty');
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// read the specified Endpoints
  ///
  /// [name] name of the Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> readCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name?pretty=$pretty');
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// delete Endpoints
  ///
  /// [name] name of the Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Endpoints
  ///
  /// [name] name of the Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> replaceCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name?pretty=$pretty');
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// partially update the specified Endpoints
  ///
  /// [name] name of the Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> patchCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name?pretty=$pretty');
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.EventList> listCoreV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/events?pretty=$pretty');
    return api_core_v1.EventList.fromJson(result);
  }

  /// delete collection of Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/events?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> createCoreV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/events?pretty=$pretty');
    return api_core_v1.Event.fromJson(result);
  }

  /// read the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> readCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_core_v1.Event.fromJson(result);
  }

  /// delete an Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> replaceCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_core_v1.Event.fromJson(result);
  }

  /// partially update the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> patchCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_core_v1.Event.fromJson(result);
  }

  /// list or watch objects of kind LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRangeList> listCoreV1NamespacedLimitRange({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/limitranges?pretty=$pretty');
    return api_core_v1.LimitRangeList.fromJson(result);
  }

  /// delete collection of LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedLimitRange({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/limitranges?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> createCoreV1NamespacedLimitRange({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/limitranges?pretty=$pretty');
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// read the specified LimitRange
  ///
  /// [name] name of the LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> readCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name?pretty=$pretty');
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// delete a LimitRange
  ///
  /// [name] name of the LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified LimitRange
  ///
  /// [name] name of the LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> replaceCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name?pretty=$pretty');
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// partially update the specified LimitRange
  ///
  /// [name] name of the LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> patchCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name?pretty=$pretty');
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// list or watch objects of kind PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaimList>
      listCoreV1NamespacedPersistentVolumeClaim({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaimList.fromJson(result);
  }

  /// delete collection of PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPersistentVolumeClaim({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      createCoreV1NamespacedPersistentVolumeClaim({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// read the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      readCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// delete a PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      deleteCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// replace the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      replaceCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// partially update the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      patchCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// read status of the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      readCoreV1NamespacedPersistentVolumeClaimStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// replace status of the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      replaceCoreV1NamespacedPersistentVolumeClaimStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// partially update status of the specified PersistentVolumeClaim
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      patchCoreV1NamespacedPersistentVolumeClaimStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// list or watch objects of kind Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodList> listCoreV1NamespacedPod({
    required String namespace,
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/pods?pretty=$pretty');
    return api_core_v1.PodList.fromJson(result);
  }

  /// delete collection of Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPod({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/pods?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> createCoreV1NamespacedPod({
    required String namespace,
    bool? pretty,
  }) async {
    final result =
        await _postJsonMap('/api/v1/namespaces/$namespace/pods?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// read the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// delete a Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> deleteCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// replace the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// partially update the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// connect GET requests to attach of Pod
  ///
  /// [container] The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] name of the PodAttachOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [stderr] Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  ///
  /// [stdin] Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  Future<String> connectCoreV1GetNamespacedPodAttach({
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/attach?container=$container&stderr=$stderr&stdin=$stdin&stdout=$stdout&tty=$tty');
    return result;
  }

  /// connect POST requests to attach of Pod
  ///
  /// [container] The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] name of the PodAttachOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [stderr] Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  ///
  /// [stdin] Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  Future<String> connectCoreV1PostNamespacedPodAttach({
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/attach?container=$container&stderr=$stderr&stdin=$stdin&stdout=$stdout&tty=$tty');
    return result;
  }

  /// create binding of a Pod
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [name] name of the Binding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Binding> createCoreV1NamespacedPodBinding({
    String? dryRun,
    String? fieldManager,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/binding?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_core_v1.Binding.fromJson(result);
  }

  /// read ephemeralcontainers of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPodEphemeralcontainers({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// replace ephemeralcontainers of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPodEphemeralcontainers({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// partially update ephemeralcontainers of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPodEphemeralcontainers({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// create eviction of a Pod
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [name] name of the Eviction
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.Eviction> createCoreV1NamespacedPodEviction({
    String? dryRun,
    String? fieldManager,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/eviction?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_policy_v1.Eviction.fromJson(result);
  }

  /// connect GET requests to exec of Pod
  ///
  /// [command] Command is the remote command to execute. argv array. Not executed within a shell.
  ///
  /// [container] Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] name of the PodExecOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [stderr] Redirect the standard error stream of the pod for this call. Defaults to true.
  ///
  /// [stdin] Redirect the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Redirect the standard output stream of the pod for this call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  Future<String> connectCoreV1GetNamespacedPodExec({
    String? command,
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/exec?command=$command&container=$container&stderr=$stderr&stdin=$stdin&stdout=$stdout&tty=$tty');
    return result;
  }

  /// connect POST requests to exec of Pod
  ///
  /// [command] Command is the remote command to execute. argv array. Not executed within a shell.
  ///
  /// [container] Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] name of the PodExecOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [stderr] Redirect the standard error stream of the pod for this call. Defaults to true.
  ///
  /// [stdin] Redirect the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Redirect the standard output stream of the pod for this call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  Future<String> connectCoreV1PostNamespacedPodExec({
    String? command,
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/exec?command=$command&container=$container&stderr=$stderr&stdin=$stdin&stdout=$stdout&tty=$tty');
    return result;
  }

  /// read log of the specified Pod
  ///
  /// [container] The container for which to stream logs. Defaults to only container if there is one container in the pod.
  ///
  /// [follow] Follow the log stream of the pod. Defaults to false.
  ///
  /// [insecureSkipTLSVerifyBackend] insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to. This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet. If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
  ///
  /// [limitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [previous] Return previous terminated container logs. Defaults to false.
  ///
  /// [sinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
  ///
  /// [tailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
  ///
  /// [timestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
  Future<String> readCoreV1NamespacedPodLog({
    String? container,
    bool? follow,
    bool? insecureSkipTLSVerifyBackend,
    int? limitBytes,
    required String name,
    required String namespace,
    bool? pretty,
    bool? previous,
    int? sinceSeconds,
    int? tailLines,
    bool? timestamps,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/log?container=$container&follow=$follow&insecureSkipTLSVerifyBackend=$insecureSkipTLSVerifyBackend&limitBytes=$limitBytes&pretty=$pretty&previous=$previous&sinceSeconds=$sinceSeconds&tailLines=$tailLines&timestamps=$timestamps');
    return result;
  }

  /// connect GET requests to portforward of Pod
  ///
  /// [name] name of the PodPortForwardOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [ports] List of ports to forward Required when using WebSockets
  Future<String> connectCoreV1GetNamespacedPodPortforward({
    required String name,
    required String namespace,
    int? ports,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/portforward?ports=$ports');
    return result;
  }

  /// connect POST requests to portforward of Pod
  ///
  /// [name] name of the PodPortForwardOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [ports] List of ports to forward Required when using WebSockets
  Future<String> connectCoreV1PostNamespacedPodPortforward({
    required String name,
    required String namespace,
    int? ports,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/portforward?ports=$ports');
    return result;
  }

  /// connect GET requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1GetNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1DeleteNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PostNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PutNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PatchNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1HeadNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1OptionsNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect GET requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1GetNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1DeleteNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PostNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PutNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PatchNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1HeadNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Pod
  ///
  /// [name] name of the PodProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1OptionsNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// read status of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPodStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// replace status of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPodStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// partially update status of the specified Pod
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPodStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status?pretty=$pretty');
    return api_core_v1.Pod.fromJson(result);
  }

  /// list or watch objects of kind PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplateList> listCoreV1NamespacedPodTemplate({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates?pretty=$pretty');
    return api_core_v1.PodTemplateList.fromJson(result);
  }

  /// delete collection of PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPodTemplate({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> createCoreV1NamespacedPodTemplate({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates?pretty=$pretty');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// read the specified PodTemplate
  ///
  /// [name] name of the PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> readCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name?pretty=$pretty');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// delete a PodTemplate
  ///
  /// [name] name of the PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> deleteCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name?pretty=$pretty');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// replace the specified PodTemplate
  ///
  /// [name] name of the PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> replaceCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name?pretty=$pretty');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// partially update the specified PodTemplate
  ///
  /// [name] name of the PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> patchCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name?pretty=$pretty');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// list or watch objects of kind ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationControllerList>
      listCoreV1NamespacedReplicationController({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers?pretty=$pretty');
    return api_core_v1.ReplicationControllerList.fromJson(result);
  }

  /// delete collection of ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedReplicationController({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      createCoreV1NamespacedReplicationController({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// read the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      readCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// delete a ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      replaceCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// partially update the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      patchCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// read scale of the specified ReplicationController
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      readCoreV1NamespacedReplicationControllerScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// replace scale of the specified ReplicationController
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      replaceCoreV1NamespacedReplicationControllerScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// partially update scale of the specified ReplicationController
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      patchCoreV1NamespacedReplicationControllerScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// read status of the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      readCoreV1NamespacedReplicationControllerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// replace status of the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      replaceCoreV1NamespacedReplicationControllerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// partially update status of the specified ReplicationController
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      patchCoreV1NamespacedReplicationControllerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status?pretty=$pretty');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// list or watch objects of kind ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuotaList> listCoreV1NamespacedResourceQuota({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas?pretty=$pretty');
    return api_core_v1.ResourceQuotaList.fromJson(result);
  }

  /// delete collection of ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedResourceQuota({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> createCoreV1NamespacedResourceQuota({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// read the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> readCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// delete a ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> deleteCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// replace the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> replaceCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// partially update the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> patchCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// read status of the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> readCoreV1NamespacedResourceQuotaStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// replace status of the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> replaceCoreV1NamespacedResourceQuotaStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// partially update status of the specified ResourceQuota
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> patchCoreV1NamespacedResourceQuotaStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status?pretty=$pretty');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// list or watch objects of kind Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.SecretList> listCoreV1NamespacedSecret({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/secrets?pretty=$pretty');
    return api_core_v1.SecretList.fromJson(result);
  }

  /// delete collection of Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedSecret({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/secrets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> createCoreV1NamespacedSecret({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/secrets?pretty=$pretty');
    return api_core_v1.Secret.fromJson(result);
  }

  /// read the specified Secret
  ///
  /// [name] name of the Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> readCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name?pretty=$pretty');
    return api_core_v1.Secret.fromJson(result);
  }

  /// delete a Secret
  ///
  /// [name] name of the Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Secret
  ///
  /// [name] name of the Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> replaceCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name?pretty=$pretty');
    return api_core_v1.Secret.fromJson(result);
  }

  /// partially update the specified Secret
  ///
  /// [name] name of the Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> patchCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name?pretty=$pretty');
    return api_core_v1.Secret.fromJson(result);
  }

  /// list or watch objects of kind ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccountList> listCoreV1NamespacedServiceAccount({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts?pretty=$pretty');
    return api_core_v1.ServiceAccountList.fromJson(result);
  }

  /// delete collection of ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedServiceAccount({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> createCoreV1NamespacedServiceAccount({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts?pretty=$pretty');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// read the specified ServiceAccount
  ///
  /// [name] name of the ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> readCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name?pretty=$pretty');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// delete a ServiceAccount
  ///
  /// [name] name of the ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> deleteCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name?pretty=$pretty');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// replace the specified ServiceAccount
  ///
  /// [name] name of the ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> replaceCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name?pretty=$pretty');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// partially update the specified ServiceAccount
  ///
  /// [name] name of the ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> patchCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name?pretty=$pretty');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// create token of a ServiceAccount
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [name] name of the TokenRequest
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authentication_v1.TokenRequest>
      createCoreV1NamespacedServiceAccountToken({
    String? dryRun,
    String? fieldManager,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name/token?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authentication_v1.TokenRequest.fromJson(result);
  }

  /// list or watch objects of kind Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceList> listCoreV1NamespacedService({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/services?pretty=$pretty');
    return api_core_v1.ServiceList.fromJson(result);
  }

  /// create a Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> createCoreV1NamespacedService({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/services?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// read the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> readCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/services/$name?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// delete a Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/services/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> replaceCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/services/$name?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// partially update the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> patchCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/services/$name?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// connect GET requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1GetNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1DeleteNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PostNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PutNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PatchNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1HeadNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1OptionsNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect GET requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1GetNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1DeleteNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PostNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PutNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PatchNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1HeadNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Service
  ///
  /// [name] name of the ServiceProxyOptions
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1OptionsNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// read status of the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> readCoreV1NamespacedServiceStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// replace status of the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> replaceCoreV1NamespacedServiceStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// partially update status of the specified Service
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> patchCoreV1NamespacedServiceStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status?pretty=$pretty');
    return api_core_v1.Service.fromJson(result);
  }

  /// read the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> readCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap('/api/v1/namespaces/$name?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// delete a Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _deleteJsonMap('/api/v1/namespaces/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap('/api/v1/namespaces/$name?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// partially update the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> patchCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _patchJsonMap('/api/v1/namespaces/$name?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// replace finalize of the specified Namespace
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1NamespaceFinalize({
    String? dryRun,
    String? fieldManager,
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/namespaces/$name/finalize?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// read status of the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> readCoreV1NamespaceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/namespaces/$name/status?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// replace status of the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1NamespaceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _putJsonMap('/api/v1/namespaces/$name/status?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// partially update status of the specified Namespace
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> patchCoreV1NamespaceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _patchJsonMap('/api/v1/namespaces/$name/status?pretty=$pretty');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// list or watch objects of kind Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.NodeList> listCoreV1Node({
    bool? pretty,
  }) async {
    final result = await _getJsonMap('/api/v1/nodes?pretty=$pretty');
    return api_core_v1.NodeList.fromJson(result);
  }

  /// delete collection of Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1CollectionNode({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap('/api/v1/nodes?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> createCoreV1Node({
    bool? pretty,
  }) async {
    final result = await _postJsonMap('/api/v1/nodes?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// read the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> readCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap('/api/v1/nodes/$name?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// delete a Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap('/api/v1/nodes/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> replaceCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap('/api/v1/nodes/$name?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// partially update the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> patchCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap('/api/v1/nodes/$name?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// connect GET requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1GetNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _getJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1DeleteNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _deleteJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PostNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _postJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PutNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _putJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PatchNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _patchJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1HeadNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _headJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1OptionsNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final result =
        await _optionsJsonString('/api/v1/nodes/$name/proxy?path=$pathQuery');
    return result;
  }

  /// connect GET requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1GetNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result =
        await _getJsonString('/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect DELETE requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1DeleteNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _deleteJsonString(
        '/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect POST requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PostNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _postJsonString(
        '/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PUT requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PutNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result =
        await _putJsonString('/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect PATCH requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PatchNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _patchJsonString(
        '/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect HEAD requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1HeadNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _headJsonString(
        '/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// connect OPTIONS requests to proxy of Node
  ///
  /// [name] name of the NodeProxyOptions
  ///
  /// [path] path to the resource
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1OptionsNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final result = await _optionsJsonString(
        '/api/v1/nodes/$name/proxy/$path?path=$pathQuery');
    return result;
  }

  /// read status of the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> readCoreV1NodeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/nodes/$name/status?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// replace status of the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> replaceCoreV1NodeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _putJsonMap('/api/v1/nodes/$name/status?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// partially update status of the specified Node
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> patchCoreV1NodeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _patchJsonMap('/api/v1/nodes/$name/status?pretty=$pretty');
    return api_core_v1.Node.fromJson(result);
  }

  /// list or watch objects of kind PersistentVolumeClaim
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PersistentVolumeClaimList>
      listCoreV1PersistentVolumeClaimForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/persistentvolumeclaims?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.PersistentVolumeClaimList.fromJson(result);
  }

  /// list or watch objects of kind PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeList> listCoreV1PersistentVolume({
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/persistentvolumes?pretty=$pretty');
    return api_core_v1.PersistentVolumeList.fromJson(result);
  }

  /// delete collection of PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionPersistentVolume({
    bool? pretty,
  }) async {
    final result =
        await _deleteJsonMap('/api/v1/persistentvolumes?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> createCoreV1PersistentVolume({
    bool? pretty,
  }) async {
    final result =
        await _postJsonMap('/api/v1/persistentvolumes?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// read the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> readCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/api/v1/persistentvolumes/$name?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// delete a PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> deleteCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _deleteJsonMap('/api/v1/persistentvolumes/$name?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// replace the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> replaceCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _putJsonMap('/api/v1/persistentvolumes/$name?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// partially update the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> patchCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final result =
        await _patchJsonMap('/api/v1/persistentvolumes/$name?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// read status of the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> readCoreV1PersistentVolumeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/persistentvolumes/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// replace status of the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> replaceCoreV1PersistentVolumeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/api/v1/persistentvolumes/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// partially update status of the specified PersistentVolume
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> patchCoreV1PersistentVolumeStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/api/v1/persistentvolumes/$name/status?pretty=$pretty');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// list or watch objects of kind Pod
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PodList> listCoreV1PodForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/pods?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.PodList.fromJson(result);
  }

  /// list or watch objects of kind PodTemplate
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PodTemplateList> listCoreV1PodTemplateForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/podtemplates?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.PodTemplateList.fromJson(result);
  }

  /// list or watch objects of kind ReplicationController
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ReplicationControllerList>
      listCoreV1ReplicationControllerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/replicationcontrollers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ReplicationControllerList.fromJson(result);
  }

  /// list or watch objects of kind ResourceQuota
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ResourceQuotaList>
      listCoreV1ResourceQuotaForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/resourcequotas?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ResourceQuotaList.fromJson(result);
  }

  /// list or watch objects of kind Secret
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.SecretList> listCoreV1SecretForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/secrets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.SecretList.fromJson(result);
  }

  /// list or watch objects of kind ServiceAccount
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ServiceAccountList>
      listCoreV1ServiceAccountForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/serviceaccounts?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ServiceAccountList.fromJson(result);
  }

  /// list or watch objects of kind Service
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ServiceList> listCoreV1ServiceForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/services?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_core_v1.ServiceList.fromJson(result);
  }

  /// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ConfigMapListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/configmaps?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1EndpointsListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/endpoints?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1EventListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1LimitRangeListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/limitranges?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Namespace. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespaceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ConfigMap. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedConfigMapList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/configmaps?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ConfigMap. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ConfigMap
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedConfigMap({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/configmaps/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Endpoints. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEndpointsList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/endpoints?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Endpoints. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Endpoints
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEndpoints({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/endpoints/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEventList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedEvent({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/events/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of LimitRange. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedLimitRangeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/limitranges?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind LimitRange. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the LimitRange
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedLimitRange({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/limitranges/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPersistentVolumeClaimList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/persistentvolumeclaims?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PersistentVolumeClaim
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPersistentVolumeClaim({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/persistentvolumeclaims/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/pods?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Pod. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Pod
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedPod({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/pods/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodTemplateList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/podtemplates?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PodTemplate. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PodTemplate
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodTemplate({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/podtemplates/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedReplicationControllerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/replicationcontrollers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ReplicationController. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ReplicationController
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedReplicationController({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/replicationcontrollers/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedResourceQuotaList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/resourcequotas?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ResourceQuota
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedResourceQuota({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/resourcequotas/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedSecretList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/secrets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Secret. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Secret
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedSecret({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/secrets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceAccountList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/serviceaccounts?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ServiceAccount
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceAccount({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/serviceaccounts/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/services?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Service. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Service
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedService({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/services/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Namespace. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Namespace
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1Namespace({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Node. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NodeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/nodes?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Node. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Node
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1Node({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/nodes/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PersistentVolumeClaim. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PersistentVolumeClaimListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/persistentvolumeclaims?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PersistentVolumeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/persistentvolumes?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PersistentVolume. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PersistentVolume
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1PersistentVolume({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/persistentvolumes/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Pod. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PodListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/pods?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PodTemplate. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PodTemplateListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/podtemplates?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ReplicationController. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ReplicationControllerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/replicationcontrollers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ResourceQuota. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ResourceQuotaListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/resourcequotas?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Secret. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1SecretListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/secrets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ServiceAccount. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ServiceAccountListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/serviceaccounts?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Service. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ServiceListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/api/v1/watch/services?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available API versions
  Future<apimachinery_pkg_apis_meta_v1.APIGroupList> getAPIVersions() async {
    final result = await _getJsonMap('/apis/');
    return apimachinery_pkg_apis_meta_v1.APIGroupList.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAdmissionregistrationAPIGroup() async {
    final result = await _getJsonMap('/apis/admissionregistration.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAdmissionregistrationV1APIResources() async {
    final result = await _getJsonMap('/apis/admissionregistration.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfigurationList>
      listAdmissionregistrationV1MutatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations?pretty=$pretty');
    return api_admissionregistration_v1.MutatingWebhookConfigurationList
        .fromJson(result);
  }

  /// delete collection of MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      createAdmissionregistrationV1MutatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations?pretty=$pretty');
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// read the specified MutatingWebhookConfiguration
  ///
  /// [name] name of the MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      readAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// delete a MutatingWebhookConfiguration
  ///
  /// [name] name of the MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified MutatingWebhookConfiguration
  ///
  /// [name] name of the MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      replaceAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// partially update the specified MutatingWebhookConfiguration
  ///
  /// [name] name of the MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      patchAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// list or watch objects of kind ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfigurationList>
      listAdmissionregistrationV1ValidatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations?pretty=$pretty');
    return api_admissionregistration_v1.ValidatingWebhookConfigurationList
        .fromJson(result);
  }

  /// delete collection of ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      createAdmissionregistrationV1ValidatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations?pretty=$pretty');
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// read the specified ValidatingWebhookConfiguration
  ///
  /// [name] name of the ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      readAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// delete a ValidatingWebhookConfiguration
  ///
  /// [name] name of the ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ValidatingWebhookConfiguration
  ///
  /// [name] name of the ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      replaceAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// partially update the specified ValidatingWebhookConfiguration
  ///
  /// [name] name of the ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      patchAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name?pretty=$pretty');
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// watch individual changes to a list of MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1MutatingWebhookConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind MutatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the MutatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1MutatingWebhookConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1ValidatingWebhookConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ValidatingWebhookConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ValidatingWebhookConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1ValidatingWebhookConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getApiextensionsAPIGroup() async {
    final result = await _getJsonMap('/apis/apiextensions.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getApiextensionsV1APIResources() async {
    final result = await _getJsonMap('/apis/apiextensions.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinitionList>
      listApiextensionsV1CustomResourceDefinition({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinitionList.fromJson(result);
  }

  /// delete collection of CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiextensionsV1CollectionCustomResourceDefinition({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      createApiextensionsV1CustomResourceDefinition({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// read the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      readApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// delete a CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      replaceApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// partially update the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      patchApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// read status of the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      readApiextensionsV1CustomResourceDefinitionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// replace status of the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      replaceApiextensionsV1CustomResourceDefinitionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// partially update status of the specified CustomResourceDefinition
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
              .CustomResourceDefinition>
      patchApiextensionsV1CustomResourceDefinitionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status?pretty=$pretty');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// watch individual changes to a list of CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiextensionsV1CustomResourceDefinitionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CustomResourceDefinition. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CustomResourceDefinition
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiextensionsV1CustomResourceDefinition({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getApiregistrationAPIGroup() async {
    final result = await _getJsonMap('/apis/apiregistration.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getApiregistrationV1APIResources() async {
    final result = await _getJsonMap('/apis/apiregistration.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIServiceList>
      listApiregistrationV1APIService({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIServiceList.fromJson(
        result);
  }

  /// delete collection of APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiregistrationV1CollectionAPIService({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      createApiregistrationV1APIService({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// read the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      readApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// delete an APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      replaceApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// partially update the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      patchApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// read status of the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      readApiregistrationV1APIServiceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// replace status of the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      replaceApiregistrationV1APIServiceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// partially update status of the specified APIService
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      patchApiregistrationV1APIServiceStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status?pretty=$pretty');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// watch individual changes to a list of APIService. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiregistrationV1APIServiceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/watch/apiservices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind APIService. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the APIService
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiregistrationV1APIService({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/watch/apiservices/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getAppsAPIGroup() async {
    final result = await _getJsonMap('/apis/apps/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAppsV1APIResources() async {
    final result = await _getJsonMap('/apis/apps/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind ControllerRevision
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.ControllerRevisionList>
      listAppsV1ControllerRevisionForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/controllerrevisions?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_apps_v1.ControllerRevisionList.fromJson(result);
  }

  /// list or watch objects of kind DaemonSet
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.DaemonSetList> listAppsV1DaemonSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/daemonsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_apps_v1.DaemonSetList.fromJson(result);
  }

  /// list or watch objects of kind Deployment
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.DeploymentList> listAppsV1DeploymentForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/deployments?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_apps_v1.DeploymentList.fromJson(result);
  }

  /// list or watch objects of kind ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevisionList>
      listAppsV1NamespacedControllerRevision({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions?pretty=$pretty');
    return api_apps_v1.ControllerRevisionList.fromJson(result);
  }

  /// delete collection of ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedControllerRevision({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      createAppsV1NamespacedControllerRevision({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions?pretty=$pretty');
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// read the specified ControllerRevision
  ///
  /// [name] name of the ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      readAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name?pretty=$pretty');
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// delete a ControllerRevision
  ///
  /// [name] name of the ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ControllerRevision
  ///
  /// [name] name of the ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      replaceAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name?pretty=$pretty');
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// partially update the specified ControllerRevision
  ///
  /// [name] name of the ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      patchAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name?pretty=$pretty');
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// list or watch objects of kind DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSetList> listAppsV1NamespacedDaemonSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets?pretty=$pretty');
    return api_apps_v1.DaemonSetList.fromJson(result);
  }

  /// delete collection of DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedDaemonSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> createAppsV1NamespacedDaemonSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// read the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> readAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// delete a DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> replaceAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// partially update the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> patchAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// read status of the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> readAppsV1NamespacedDaemonSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// replace status of the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> replaceAppsV1NamespacedDaemonSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// partially update status of the specified DaemonSet
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> patchAppsV1NamespacedDaemonSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status?pretty=$pretty');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// list or watch objects of kind Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DeploymentList> listAppsV1NamespacedDeployment({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments?pretty=$pretty');
    return api_apps_v1.DeploymentList.fromJson(result);
  }

  /// delete collection of Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedDeployment({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> createAppsV1NamespacedDeployment({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// read the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> readAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// delete a Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> replaceAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// partially update the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> patchAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// read scale of the specified Deployment
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedDeploymentScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// replace scale of the specified Deployment
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedDeploymentScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// partially update scale of the specified Deployment
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedDeploymentScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// read status of the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> readAppsV1NamespacedDeploymentStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// replace status of the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> replaceAppsV1NamespacedDeploymentStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// partially update status of the specified Deployment
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> patchAppsV1NamespacedDeploymentStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status?pretty=$pretty');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// list or watch objects of kind ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSetList> listAppsV1NamespacedReplicaSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets?pretty=$pretty');
    return api_apps_v1.ReplicaSetList.fromJson(result);
  }

  /// delete collection of ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedReplicaSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> createAppsV1NamespacedReplicaSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// read the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> readAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// delete a ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> replaceAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// partially update the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> patchAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// read scale of the specified ReplicaSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedReplicaSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// replace scale of the specified ReplicaSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedReplicaSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// partially update scale of the specified ReplicaSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedReplicaSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// read status of the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> readAppsV1NamespacedReplicaSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// replace status of the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> replaceAppsV1NamespacedReplicaSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// partially update status of the specified ReplicaSet
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> patchAppsV1NamespacedReplicaSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status?pretty=$pretty');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// list or watch objects of kind StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSetList> listAppsV1NamespacedStatefulSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets?pretty=$pretty');
    return api_apps_v1.StatefulSetList.fromJson(result);
  }

  /// delete collection of StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedStatefulSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> createAppsV1NamespacedStatefulSet({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// read the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> readAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// delete a StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> replaceAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// partially update the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> patchAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// read scale of the specified StatefulSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedStatefulSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// replace scale of the specified StatefulSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedStatefulSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// partially update scale of the specified StatefulSet
  ///
  /// [name] name of the Scale
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedStatefulSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale?pretty=$pretty');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// read status of the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> readAppsV1NamespacedStatefulSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// replace status of the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> replaceAppsV1NamespacedStatefulSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// partially update status of the specified StatefulSet
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> patchAppsV1NamespacedStatefulSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status?pretty=$pretty');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// list or watch objects of kind ReplicaSet
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.ReplicaSetList> listAppsV1ReplicaSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/replicasets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_apps_v1.ReplicaSetList.fromJson(result);
  }

  /// list or watch objects of kind StatefulSet
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.StatefulSetList> listAppsV1StatefulSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/statefulsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_apps_v1.StatefulSetList.fromJson(result);
  }

  /// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1ControllerRevisionListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/controllerrevisions?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1DaemonSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/daemonsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1DeploymentListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/deployments?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedControllerRevisionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/controllerrevisions?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ControllerRevision. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ControllerRevision
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedControllerRevision({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/controllerrevisions/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of DaemonSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDaemonSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/daemonsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind DaemonSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the DaemonSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDaemonSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/daemonsets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Deployment. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDeploymentList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/deployments?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Deployment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Deployment
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDeployment({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/deployments/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedReplicaSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/replicasets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ReplicaSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedReplicaSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/replicasets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedStatefulSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/statefulsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind StatefulSet. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the StatefulSet
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedStatefulSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/statefulsets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ReplicaSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1ReplicaSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/replicasets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of StatefulSet. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1StatefulSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/apps/v1/watch/statefulsets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAuthenticationAPIGroup() async {
    final result = await _getJsonMap('/apis/authentication.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAuthenticationV1APIResources() async {
    final result = await _getJsonMap('/apis/authentication.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// create a TokenReview
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authentication_v1.TokenReview> createAuthenticationV1TokenReview({
    String? dryRun,
    String? fieldManager,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/authentication.k8s.io/v1/tokenreviews?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authentication_v1.TokenReview.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAuthorizationAPIGroup() async {
    final result = await _getJsonMap('/apis/authorization.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAuthorizationV1APIResources() async {
    final result = await _getJsonMap('/apis/authorization.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// create a LocalSubjectAccessReview
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.LocalSubjectAccessReview>
      createAuthorizationV1NamespacedLocalSubjectAccessReview({
    String? dryRun,
    String? fieldManager,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/namespaces/$namespace/localsubjectaccessreviews?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authorization_v1.LocalSubjectAccessReview.fromJson(result);
  }

  /// create a SelfSubjectAccessReview
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SelfSubjectAccessReview>
      createAuthorizationV1SelfSubjectAccessReview({
    String? dryRun,
    String? fieldManager,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/selfsubjectaccessreviews?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authorization_v1.SelfSubjectAccessReview.fromJson(result);
  }

  /// create a SelfSubjectRulesReview
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SelfSubjectRulesReview>
      createAuthorizationV1SelfSubjectRulesReview({
    String? dryRun,
    String? fieldManager,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/selfsubjectrulesreviews?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authorization_v1.SelfSubjectRulesReview.fromJson(result);
  }

  /// create a SubjectAccessReview
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
  ///
  /// [fieldManager] fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SubjectAccessReview>
      createAuthorizationV1SubjectAccessReview({
    String? dryRun,
    String? fieldManager,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/subjectaccessreviews?dryRun=$dryRun&fieldManager=$fieldManager&pretty=$pretty');
    return api_authorization_v1.SubjectAccessReview.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAutoscalingAPIGroup() async {
    final result = await _getJsonMap('/apis/autoscaling/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV1APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v1.HorizontalPodAutoscalerList>
      listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_autoscaling_v1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscalerList>
      listAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// delete collection of HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      createAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      readAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// delete a HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      replaceAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      patchAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// replace status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/namespaces/$namespace/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/namespaces/$namespace/horizontalpodautoscalers/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV2beta1APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v2beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscalerList>
      listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_autoscaling_v2beta1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscalerList>
      listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// delete collection of HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// delete a HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// replace status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta1.HorizontalPodAutoscaler>
      patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta1/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/watch/namespaces/$namespace/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta1/watch/namespaces/$namespace/horizontalpodautoscalers/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV2beta2APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v2beta2/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscalerList>
      listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_autoscaling_v2beta2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// list or watch objects of kind HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscalerList>
      listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// delete collection of HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// delete a HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// read status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// replace status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// partially update status of the specified HorizontalPodAutoscaler
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status?pretty=$pretty');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/namespaces/$namespace/horizontalpodautoscalers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the HorizontalPodAutoscaler
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/namespaces/$namespace/horizontalpodautoscalers/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getBatchAPIGroup() async {
    final result = await _getJsonMap('/apis/batch/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getBatchV1APIResources() async {
    final result = await _getJsonMap('/apis/batch/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CronJob
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_batch_v1.CronJobList> listBatchV1CronJobForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_batch_v1.CronJobList.fromJson(result);
  }

  /// list or watch objects of kind Job
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_batch_v1.JobList> listBatchV1JobForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/jobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_batch_v1.JobList.fromJson(result);
  }

  /// list or watch objects of kind CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJobList> listBatchV1NamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return api_batch_v1.CronJobList.fromJson(result);
  }

  /// delete collection of CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1CollectionNamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> createBatchV1NamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// read the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> readBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// delete a CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> replaceBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// partially update the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> patchBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// read status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> readBatchV1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// replace status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> replaceBatchV1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// partially update status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> patchBatchV1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// list or watch objects of kind Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.JobList> listBatchV1NamespacedJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs?pretty=$pretty');
    return api_batch_v1.JobList.fromJson(result);
  }

  /// delete collection of Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1CollectionNamespacedJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> createBatchV1NamespacedJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// read the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> readBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// delete a Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> replaceBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// partially update the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> patchBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// read status of the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> readBatchV1NamespacedJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// replace status of the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> replaceBatchV1NamespacedJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// partially update status of the specified Job
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> patchBatchV1NamespacedJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status?pretty=$pretty');
    return api_batch_v1.Job.fromJson(result);
  }

  /// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1CronJobListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1JobListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/jobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedCronJobList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedCronJob({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/cronjobs/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Job. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedJobList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/jobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Job. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Job
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchBatchV1NamespacedJob({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/jobs/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getBatchV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/batch/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CronJob
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_batch_v1beta1.CronJobList>
      listBatchV1beta1CronJobForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_batch_v1beta1.CronJobList.fromJson(result);
  }

  /// list or watch objects of kind CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJobList> listBatchV1beta1NamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return api_batch_v1beta1.CronJobList.fromJson(result);
  }

  /// delete collection of CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1beta1CollectionNamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> createBatchV1beta1NamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// read the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> readBatchV1beta1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// delete a CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1beta1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> replaceBatchV1beta1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// partially update the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> patchBatchV1beta1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// read status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> readBatchV1beta1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// replace status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> replaceBatchV1beta1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// partially update status of the specified CronJob
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1beta1.CronJob> patchBatchV1beta1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/batch/v1beta1/namespaces/$namespace/cronjobs/$name/status?pretty=$pretty');
    return api_batch_v1beta1.CronJob.fromJson(result);
  }

  /// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1beta1CronJobListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/watch/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of CronJob. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1beta1NamespacedCronJobList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/watch/namespaces/$namespace/cronjobs?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CronJob. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CronJob
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1beta1NamespacedCronJob({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/batch/v1beta1/watch/namespaces/$namespace/cronjobs/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getCertificatesAPIGroup() async {
    final result = await _getJsonMap('/apis/certificates.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCertificatesV1APIResources() async {
    final result = await _getJsonMap('/apis/certificates.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequestList>
      listCertificatesV1CertificateSigningRequest({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequestList.fromJson(result);
  }

  /// delete collection of CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCertificatesV1CollectionCertificateSigningRequest({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      createCertificatesV1CertificateSigningRequest({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// read the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// delete a CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// partially update the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// read approval of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequestApproval({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// replace approval of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequestApproval({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// partially update approval of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequestApproval({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// read status of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequestStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// replace status of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequestStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// partially update status of the specified CertificateSigningRequest
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequestStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status?pretty=$pretty');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// watch individual changes to a list of CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCertificatesV1CertificateSigningRequestList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/watch/certificatesigningrequests?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CertificateSigningRequest. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CertificateSigningRequest
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCertificatesV1CertificateSigningRequest({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getCoordinationAPIGroup() async {
    final result = await _getJsonMap('/apis/coordination.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCoordinationV1APIResources() async {
    final result = await _getJsonMap('/apis/coordination.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind Lease
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_coordination_v1.LeaseList>
      listCoordinationV1LeaseForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/leases?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_coordination_v1.LeaseList.fromJson(result);
  }

  /// list or watch objects of kind Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.LeaseList> listCoordinationV1NamespacedLease({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases?pretty=$pretty');
    return api_coordination_v1.LeaseList.fromJson(result);
  }

  /// delete collection of Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoordinationV1CollectionNamespacedLease({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> createCoordinationV1NamespacedLease({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases?pretty=$pretty');
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// read the specified Lease
  ///
  /// [name] name of the Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> readCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name?pretty=$pretty');
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// delete a Lease
  ///
  /// [name] name of the Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Lease
  ///
  /// [name] name of the Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> replaceCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name?pretty=$pretty');
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// partially update the specified Lease
  ///
  /// [name] name of the Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> patchCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name?pretty=$pretty');
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1LeaseListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/watch/leases?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Lease. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1NamespacedLeaseList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/watch/namespaces/$namespace/leases?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Lease. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Lease
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1NamespacedLease({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/watch/namespaces/$namespace/leases/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getDiscoveryAPIGroup() async {
    final result = await _getJsonMap('/apis/discovery.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getDiscoveryV1APIResources() async {
    final result = await _getJsonMap('/apis/discovery.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind EndpointSlice
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_discovery_v1.EndpointSliceList>
      listDiscoveryV1EndpointSliceForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_discovery_v1.EndpointSliceList.fromJson(result);
  }

  /// list or watch objects of kind EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSliceList>
      listDiscoveryV1NamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return api_discovery_v1.EndpointSliceList.fromJson(result);
  }

  /// delete collection of EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1CollectionNamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      createDiscoveryV1NamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// read the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      readDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// delete an EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      replaceDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// partially update the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      patchDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1EndpointSliceListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1NamespacedEndpointSliceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/namespaces/$namespace/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1NamespacedEndpointSlice({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/namespaces/$namespace/endpointslices/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getDiscoveryV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/discovery.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind EndpointSlice
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_discovery_v1beta1.EndpointSliceList>
      listDiscoveryV1beta1EndpointSliceForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_discovery_v1beta1.EndpointSliceList.fromJson(result);
  }

  /// list or watch objects of kind EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1beta1.EndpointSliceList>
      listDiscoveryV1beta1NamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return api_discovery_v1beta1.EndpointSliceList.fromJson(result);
  }

  /// delete collection of EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1beta1CollectionNamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1beta1.EndpointSlice>
      createDiscoveryV1beta1NamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices?pretty=$pretty');
    return api_discovery_v1beta1.EndpointSlice.fromJson(result);
  }

  /// read the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1beta1.EndpointSlice>
      readDiscoveryV1beta1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1beta1.EndpointSlice.fromJson(result);
  }

  /// delete an EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1beta1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1beta1.EndpointSlice>
      replaceDiscoveryV1beta1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1beta1.EndpointSlice.fromJson(result);
  }

  /// partially update the specified EndpointSlice
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1beta1.EndpointSlice>
      patchDiscoveryV1beta1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/discovery.k8s.io/v1beta1/namespaces/$namespace/endpointslices/$name?pretty=$pretty');
    return api_discovery_v1beta1.EndpointSlice.fromJson(result);
  }

  /// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1beta1EndpointSliceListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/watch/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1beta1NamespacedEndpointSliceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/watch/namespaces/$namespace/endpointslices?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind EndpointSlice. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the EndpointSlice
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1beta1NamespacedEndpointSlice({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1beta1/watch/namespaces/$namespace/endpointslices/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getEventsAPIGroup() async {
    final result = await _getJsonMap('/apis/events.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getEventsV1APIResources() async {
    final result = await _getJsonMap('/apis/events.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_events_v1.EventList> listEventsV1EventForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_events_v1.EventList.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.EventList> listEventsV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events?pretty=$pretty');
    return api_events_v1.EventList.fromJson(result);
  }

  /// delete collection of Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteEventsV1CollectionNamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> createEventsV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events?pretty=$pretty');
    return api_events_v1.Event.fromJson(result);
  }

  /// read the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> readEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1.Event.fromJson(result);
  }

  /// delete an Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> replaceEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1.Event.fromJson(result);
  }

  /// partially update the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> patchEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1.Event.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1EventListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/watch/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1NamespacedEventList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/watch/namespaces/$namespace/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1NamespacedEvent({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/watch/namespaces/$namespace/events/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getEventsV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/events.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_events_v1beta1.EventList> listEventsV1beta1EventForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_events_v1beta1.EventList.fromJson(result);
  }

  /// list or watch objects of kind Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1beta1.EventList> listEventsV1beta1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events?pretty=$pretty');
    return api_events_v1beta1.EventList.fromJson(result);
  }

  /// delete collection of Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteEventsV1beta1CollectionNamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1beta1.Event> createEventsV1beta1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events?pretty=$pretty');
    return api_events_v1beta1.Event.fromJson(result);
  }

  /// read the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1beta1.Event> readEventsV1beta1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1beta1.Event.fromJson(result);
  }

  /// delete an Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteEventsV1beta1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1beta1.Event> replaceEventsV1beta1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1beta1.Event.fromJson(result);
  }

  /// partially update the specified Event
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1beta1.Event> patchEventsV1beta1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/events.k8s.io/v1beta1/namespaces/$namespace/events/$name?pretty=$pretty');
    return api_events_v1beta1.Event.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1beta1EventListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/watch/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Event. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1beta1NamespacedEventList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/watch/namespaces/$namespace/events?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Event. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Event
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1beta1NamespacedEvent({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1beta1/watch/namespaces/$namespace/events/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getFlowcontrolApiserverAPIGroup() async {
    final result = await _getJsonMap('/apis/flowcontrol.apiserver.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getFlowcontrolApiserverV1beta1APIResources() async {
    final result =
        await _getJsonMap('/apis/flowcontrol.apiserver.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchemaList>
      listFlowcontrolApiserverV1beta1FlowSchema({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchemaList.fromJson(result);
  }

  /// delete collection of FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1CollectionFlowSchema({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      createFlowcontrolApiserverV1beta1FlowSchema({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// read the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      readFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// delete a FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      replaceFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// partially update the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      patchFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// read status of the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      readFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// replace status of the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      replaceFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// partially update status of the specified FlowSchema
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.FlowSchema>
      patchFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.FlowSchema.fromJson(result);
  }

  /// list or watch objects of kind PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfigurationList>
      listFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfigurationList.fromJson(
        result);
  }

  /// delete collection of PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      createFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// read the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// delete a PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// partially update the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// read status of the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// replace status of the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// partially update status of the specified PriorityLevelConfiguration
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta1.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status?pretty=$pretty');
    return api_flowcontrol_v1beta1.PriorityLevelConfiguration.fromJson(result);
  }

  /// watch individual changes to a list of FlowSchema. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1FlowSchemaList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind FlowSchema. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the FlowSchema
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1FlowSchema({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PriorityLevelConfiguration
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getInternalApiserverAPIGroup() async {
    final result = await _getJsonMap('/apis/internal.apiserver.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getInternalApiserverV1alpha1APIResources() async {
    final result =
        await _getJsonMap('/apis/internal.apiserver.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersionList>
      listInternalApiserverV1alpha1StorageVersion({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersionList.fromJson(result);
  }

  /// delete collection of StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteInternalApiserverV1alpha1CollectionStorageVersion({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      createInternalApiserverV1alpha1StorageVersion({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// read the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      readInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// delete a StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      replaceInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// partially update the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      patchInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// read status of the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      readInternalApiserverV1alpha1StorageVersionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// replace status of the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      replaceInternalApiserverV1alpha1StorageVersionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// partially update status of the specified StorageVersion
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      patchInternalApiserverV1alpha1StorageVersionStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status?pretty=$pretty');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// watch individual changes to a list of StorageVersion. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchInternalApiserverV1alpha1StorageVersionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind StorageVersion. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the StorageVersion
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchInternalApiserverV1alpha1StorageVersion({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getNetworkingAPIGroup() async {
    final result = await _getJsonMap('/apis/networking.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNetworkingV1APIResources() async {
    final result = await _getJsonMap('/apis/networking.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClassList> listNetworkingV1IngressClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses?pretty=$pretty');
    return api_networking_v1.IngressClassList.fromJson(result);
  }

  /// delete collection of IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionIngressClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> createNetworkingV1IngressClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses?pretty=$pretty');
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// read the specified IngressClass
  ///
  /// [name] name of the IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> readNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name?pretty=$pretty');
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// delete an IngressClass
  ///
  /// [name] name of the IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified IngressClass
  ///
  /// [name] name of the IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> replaceNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name?pretty=$pretty');
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// partially update the specified IngressClass
  ///
  /// [name] name of the IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> patchNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name?pretty=$pretty');
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// list or watch objects of kind Ingress
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_networking_v1.IngressList>
      listNetworkingV1IngressForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/ingresses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_networking_v1.IngressList.fromJson(result);
  }

  /// list or watch objects of kind Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressList> listNetworkingV1NamespacedIngress({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses?pretty=$pretty');
    return api_networking_v1.IngressList.fromJson(result);
  }

  /// delete collection of Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionNamespacedIngress({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create an Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> createNetworkingV1NamespacedIngress({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// read the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> readNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// delete an Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> replaceNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// partially update the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> patchNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// read status of the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> readNetworkingV1NamespacedIngressStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// replace status of the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> replaceNetworkingV1NamespacedIngressStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// partially update status of the specified Ingress
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> patchNetworkingV1NamespacedIngressStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status?pretty=$pretty');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// list or watch objects of kind NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicyList>
      listNetworkingV1NamespacedNetworkPolicy({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies?pretty=$pretty');
    return api_networking_v1.NetworkPolicyList.fromJson(result);
  }

  /// delete collection of NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionNamespacedNetworkPolicy({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      createNetworkingV1NamespacedNetworkPolicy({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies?pretty=$pretty');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// read the specified NetworkPolicy
  ///
  /// [name] name of the NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      readNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name?pretty=$pretty');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// delete a NetworkPolicy
  ///
  /// [name] name of the NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified NetworkPolicy
  ///
  /// [name] name of the NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      replaceNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name?pretty=$pretty');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// partially update the specified NetworkPolicy
  ///
  /// [name] name of the NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      patchNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name?pretty=$pretty');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// list or watch objects of kind NetworkPolicy
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_networking_v1.NetworkPolicyList>
      listNetworkingV1NetworkPolicyForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/networkpolicies?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_networking_v1.NetworkPolicyList.fromJson(result);
  }

  /// watch individual changes to a list of IngressClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/ingressclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind IngressClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the IngressClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/ingressclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/ingresses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Ingress. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedIngressList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/ingresses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Ingress. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Ingress
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedIngress({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/ingresses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedNetworkPolicyList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/networkpolicies?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the NetworkPolicy
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedNetworkPolicy({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/networkpolicies/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of NetworkPolicy. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NetworkPolicyListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/networkpolicies?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getNodeAPIGroup() async {
    final result = await _getJsonMap('/apis/node.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNodeV1APIResources() async {
    final result = await _getJsonMap('/apis/node.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClassList> listNodeV1RuntimeClass({
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/apis/node.k8s.io/v1/runtimeclasses?pretty=$pretty');
    return api_node_v1.RuntimeClassList.fromJson(result);
  }

  /// delete collection of RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNodeV1CollectionRuntimeClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> createNodeV1RuntimeClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses?pretty=$pretty');
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// read the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> readNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// delete a RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> replaceNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// partially update the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> patchNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchNodeV1RuntimeClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1/watch/runtimeclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchNodeV1RuntimeClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1/watch/runtimeclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNodeV1alpha1APIResources() async {
    final result = await _getJsonMap('/apis/node.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1alpha1.RuntimeClassList> listNodeV1alpha1RuntimeClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses?pretty=$pretty');
    return api_node_v1alpha1.RuntimeClassList.fromJson(result);
  }

  /// delete collection of RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNodeV1alpha1CollectionRuntimeClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1alpha1.RuntimeClass> createNodeV1alpha1RuntimeClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses?pretty=$pretty');
    return api_node_v1alpha1.RuntimeClass.fromJson(result);
  }

  /// read the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1alpha1.RuntimeClass> readNodeV1alpha1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1alpha1.RuntimeClass.fromJson(result);
  }

  /// delete a RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNodeV1alpha1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1alpha1.RuntimeClass> replaceNodeV1alpha1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1alpha1.RuntimeClass.fromJson(result);
  }

  /// partially update the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1alpha1.RuntimeClass> patchNodeV1alpha1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/node.k8s.io/v1alpha1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1alpha1.RuntimeClass.fromJson(result);
  }

  /// watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNodeV1alpha1RuntimeClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1alpha1/watch/runtimeclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNodeV1alpha1RuntimeClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNodeV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/node.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1beta1.RuntimeClassList> listNodeV1beta1RuntimeClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses?pretty=$pretty');
    return api_node_v1beta1.RuntimeClassList.fromJson(result);
  }

  /// delete collection of RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNodeV1beta1CollectionRuntimeClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1beta1.RuntimeClass> createNodeV1beta1RuntimeClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses?pretty=$pretty');
    return api_node_v1beta1.RuntimeClass.fromJson(result);
  }

  /// read the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1beta1.RuntimeClass> readNodeV1beta1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1beta1.RuntimeClass.fromJson(result);
  }

  /// delete a RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNodeV1beta1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1beta1.RuntimeClass> replaceNodeV1beta1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1beta1.RuntimeClass.fromJson(result);
  }

  /// partially update the specified RuntimeClass
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1beta1.RuntimeClass> patchNodeV1beta1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/node.k8s.io/v1beta1/runtimeclasses/$name?pretty=$pretty');
    return api_node_v1beta1.RuntimeClass.fromJson(result);
  }

  /// watch individual changes to a list of RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNodeV1beta1RuntimeClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1beta1/watch/runtimeclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind RuntimeClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the RuntimeClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNodeV1beta1RuntimeClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1beta1/watch/runtimeclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getPolicyAPIGroup() async {
    final result = await _getJsonMap('/apis/policy/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getPolicyV1APIResources() async {
    final result = await _getJsonMap('/apis/policy/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudgetList>
      listPolicyV1NamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudgetList.fromJson(result);
  }

  /// delete collection of PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1CollectionNamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      createPolicyV1NamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// read the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      readPolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// delete a PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      replacePolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// partially update the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      patchPolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// read status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      readPolicyV1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// replace status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      replacePolicyV1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// partially update status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      patchPolicyV1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// list or watch objects of kind PodDisruptionBudget
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_policy_v1.PodDisruptionBudgetList>
      listPolicyV1PodDisruptionBudgetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_policy_v1.PodDisruptionBudgetList.fromJson(result);
  }

  /// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1NamespacedPodDisruptionBudgetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/watch/namespaces/$namespace/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1NamespacedPodDisruptionBudget({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/watch/namespaces/$namespace/poddisruptionbudgets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1PodDisruptionBudgetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1/watch/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getPolicyV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/policy/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudgetList>
      listPolicyV1beta1NamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudgetList.fromJson(result);
  }

  /// delete collection of PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      createPolicyV1beta1NamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// read the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      readPolicyV1beta1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// delete a PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1beta1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      replacePolicyV1beta1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// partially update the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      patchPolicyV1beta1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// read status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      readPolicyV1beta1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// replace status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// partially update status of the specified PodDisruptionBudget
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodDisruptionBudget>
      patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/policy/v1beta1/namespaces/$namespace/poddisruptionbudgets/$name/status?pretty=$pretty');
    return api_policy_v1beta1.PodDisruptionBudget.fromJson(result);
  }

  /// list or watch objects of kind PodDisruptionBudget
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_policy_v1beta1.PodDisruptionBudgetList>
      listPolicyV1beta1PodDisruptionBudgetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_policy_v1beta1.PodDisruptionBudgetList.fromJson(result);
  }

  /// list or watch objects of kind PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicyList>
      listPolicyV1beta1PodSecurityPolicy({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicyList.fromJson(result);
  }

  /// delete collection of PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1beta1CollectionPodSecurityPolicy({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicy>
      createPolicyV1beta1PodSecurityPolicy({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicy.fromJson(result);
  }

  /// read the specified PodSecurityPolicy
  ///
  /// [name] name of the PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicy>
      readPolicyV1beta1PodSecurityPolicy({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies/$name?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicy.fromJson(result);
  }

  /// delete a PodSecurityPolicy
  ///
  /// [name] name of the PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicy>
      deletePolicyV1beta1PodSecurityPolicy({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies/$name?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicy.fromJson(result);
  }

  /// replace the specified PodSecurityPolicy
  ///
  /// [name] name of the PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicy>
      replacePolicyV1beta1PodSecurityPolicy({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies/$name?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicy.fromJson(result);
  }

  /// partially update the specified PodSecurityPolicy
  ///
  /// [name] name of the PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1beta1.PodSecurityPolicy>
      patchPolicyV1beta1PodSecurityPolicy({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/policy/v1beta1/podsecuritypolicies/$name?pretty=$pretty');
    return api_policy_v1beta1.PodSecurityPolicy.fromJson(result);
  }

  /// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1beta1NamespacedPodDisruptionBudgetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/watch/namespaces/$namespace/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PodDisruptionBudget
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1beta1NamespacedPodDisruptionBudget({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/watch/namespaces/$namespace/poddisruptionbudgets/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PodDisruptionBudget. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/watch/poddisruptionbudgets?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1beta1PodSecurityPolicyList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/watch/podsecuritypolicies?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PodSecurityPolicy. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PodSecurityPolicy
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1beta1PodSecurityPolicy({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/policy/v1beta1/watch/podsecuritypolicies/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getRbacAuthorizationAPIGroup() async {
    final result = await _getJsonMap('/apis/rbac.authorization.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getRbacAuthorizationV1APIResources() async {
    final result = await _getJsonMap('/apis/rbac.authorization.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBindingList>
      listRbacAuthorizationV1ClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings?pretty=$pretty');
    return api_rbac_v1.ClusterRoleBindingList.fromJson(result);
  }

  /// delete collection of ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      createRbacAuthorizationV1ClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings?pretty=$pretty');
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// read the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      readRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// delete a ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      replaceRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// partially update the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      patchRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// list or watch objects of kind ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleList> listRbacAuthorizationV1ClusterRole({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles?pretty=$pretty');
    return api_rbac_v1.ClusterRoleList.fromJson(result);
  }

  /// delete collection of ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionClusterRole({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> createRbacAuthorizationV1ClusterRole({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles?pretty=$pretty');
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// read the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> readRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// delete a ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> replaceRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// partially update the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> patchRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// list or watch objects of kind RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBindingList>
      listRbacAuthorizationV1NamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return api_rbac_v1.RoleBindingList.fromJson(result);
  }

  /// delete collection of RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionNamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      createRbacAuthorizationV1NamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// read the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding> readRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// delete a RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      replaceRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// partially update the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      patchRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// list or watch objects of kind Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleList> listRbacAuthorizationV1NamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles?pretty=$pretty');
    return api_rbac_v1.RoleList.fromJson(result);
  }

  /// delete collection of Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionNamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> createRbacAuthorizationV1NamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles?pretty=$pretty');
    return api_rbac_v1.Role.fromJson(result);
  }

  /// read the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> readRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1.Role.fromJson(result);
  }

  /// delete a Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> replaceRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1.Role.fromJson(result);
  }

  /// partially update the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> patchRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1.Role.fromJson(result);
  }

  /// list or watch objects of kind RoleBinding
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1.RoleBindingList>
      listRbacAuthorizationV1RoleBindingForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_rbac_v1.RoleBindingList.fromJson(result);
  }

  /// list or watch objects of kind Role
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1.RoleList> listRbacAuthorizationV1RoleForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_rbac_v1.RoleList.fromJson(result);
  }

  /// watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterroles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/rolebindings/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/roles/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1RoleBindingListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1RoleListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getRbacAuthorizationV1alpha1APIResources() async {
    final result =
        await _getJsonMap('/apis/rbac.authorization.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleBindingList>
      listRbacAuthorizationV1alpha1ClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleBindingList.fromJson(result);
  }

  /// delete collection of ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleBinding>
      createRbacAuthorizationV1alpha1ClusterRoleBinding({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleBinding.fromJson(result);
  }

  /// read the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleBinding>
      readRbacAuthorizationV1alpha1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleBinding.fromJson(result);
  }

  /// delete a ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleBinding>
      replaceRbacAuthorizationV1alpha1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleBinding.fromJson(result);
  }

  /// partially update the specified ClusterRoleBinding
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleBinding>
      patchRbacAuthorizationV1alpha1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleBinding.fromJson(result);
  }

  /// list or watch objects of kind ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRoleList>
      listRbacAuthorizationV1alpha1ClusterRole({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRoleList.fromJson(result);
  }

  /// delete collection of ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1CollectionClusterRole({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRole>
      createRbacAuthorizationV1alpha1ClusterRole({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRole.fromJson(result);
  }

  /// read the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRole>
      readRbacAuthorizationV1alpha1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRole.fromJson(result);
  }

  /// delete a ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRole>
      replaceRbacAuthorizationV1alpha1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRole.fromJson(result);
  }

  /// partially update the specified ClusterRole
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.ClusterRole>
      patchRbacAuthorizationV1alpha1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.ClusterRole.fromJson(result);
  }

  /// list or watch objects of kind RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleBindingList>
      listRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return api_rbac_v1alpha1.RoleBindingList.fromJson(result);
  }

  /// delete collection of RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleBinding>
      createRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings?pretty=$pretty');
    return api_rbac_v1alpha1.RoleBinding.fromJson(result);
  }

  /// read the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleBinding>
      readRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.RoleBinding.fromJson(result);
  }

  /// delete a RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleBinding>
      replaceRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.RoleBinding.fromJson(result);
  }

  /// partially update the specified RoleBinding
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleBinding>
      patchRbacAuthorizationV1alpha1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/rolebindings/$name?pretty=$pretty');
    return api_rbac_v1alpha1.RoleBinding.fromJson(result);
  }

  /// list or watch objects of kind Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.RoleList>
      listRbacAuthorizationV1alpha1NamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles?pretty=$pretty');
    return api_rbac_v1alpha1.RoleList.fromJson(result);
  }

  /// delete collection of Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1CollectionNamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.Role> createRbacAuthorizationV1alpha1NamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles?pretty=$pretty');
    return api_rbac_v1alpha1.Role.fromJson(result);
  }

  /// read the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.Role> readRbacAuthorizationV1alpha1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.Role.fromJson(result);
  }

  /// delete a Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1alpha1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.Role>
      replaceRbacAuthorizationV1alpha1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.Role.fromJson(result);
  }

  /// partially update the specified Role
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1alpha1.Role> patchRbacAuthorizationV1alpha1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/$namespace/roles/$name?pretty=$pretty');
    return api_rbac_v1alpha1.Role.fromJson(result);
  }

  /// list or watch objects of kind RoleBinding
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1alpha1.RoleBindingList>
      listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_rbac_v1alpha1.RoleBindingList.fromJson(result);
  }

  /// list or watch objects of kind Role
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1alpha1.RoleList>
      listRbacAuthorizationV1alpha1RoleForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_rbac_v1alpha1.RoleList.fromJson(result);
  }

  /// watch individual changes to a list of ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1ClusterRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ClusterRoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ClusterRoleBinding
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1ClusterRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterrolebindings/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of ClusterRole. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1ClusterRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind ClusterRole. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the ClusterRole
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1ClusterRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/clusterroles/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1NamespacedRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/$namespace/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind RoleBinding. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the RoleBinding
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1NamespacedRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/$namespace/rolebindings/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1NamespacedRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/$namespace/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind Role. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the Role
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1NamespacedRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/namespaces/$namespace/roles/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of RoleBinding. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/rolebindings?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of Role. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1alpha1RoleListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1alpha1/watch/roles?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getSchedulingAPIGroup() async {
    final result = await _getJsonMap('/apis/scheduling.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getSchedulingV1APIResources() async {
    final result = await _getJsonMap('/apis/scheduling.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClassList> listSchedulingV1PriorityClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses?pretty=$pretty');
    return api_scheduling_v1.PriorityClassList.fromJson(result);
  }

  /// delete collection of PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteSchedulingV1CollectionPriorityClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> createSchedulingV1PriorityClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses?pretty=$pretty');
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// read the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> readSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// delete a PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> replaceSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// partially update the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> patchSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1PriorityClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/watch/priorityclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1PriorityClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/watch/priorityclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getSchedulingV1alpha1APIResources() async {
    final result = await _getJsonMap('/apis/scheduling.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1alpha1.PriorityClassList>
      listSchedulingV1alpha1PriorityClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses?pretty=$pretty');
    return api_scheduling_v1alpha1.PriorityClassList.fromJson(result);
  }

  /// delete collection of PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteSchedulingV1alpha1CollectionPriorityClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1alpha1.PriorityClass>
      createSchedulingV1alpha1PriorityClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses?pretty=$pretty');
    return api_scheduling_v1alpha1.PriorityClass.fromJson(result);
  }

  /// read the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1alpha1.PriorityClass>
      readSchedulingV1alpha1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1alpha1.PriorityClass.fromJson(result);
  }

  /// delete a PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteSchedulingV1alpha1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1alpha1.PriorityClass>
      replaceSchedulingV1alpha1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1alpha1.PriorityClass.fromJson(result);
  }

  /// partially update the specified PriorityClass
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1alpha1.PriorityClass>
      patchSchedulingV1alpha1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/priorityclasses/$name?pretty=$pretty');
    return api_scheduling_v1alpha1.PriorityClass.fromJson(result);
  }

  /// watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1alpha1PriorityClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind PriorityClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the PriorityClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1alpha1PriorityClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get information of a group
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getStorageAPIGroup() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getStorageV1APIResources() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriverList> listStorageV1CSIDriver({
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csidrivers?pretty=$pretty');
    return api_storage_v1.CSIDriverList.fromJson(result);
  }

  /// delete collection of CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionCSIDriver({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> createStorageV1CSIDriver({
    bool? pretty,
  }) async {
    final result =
        await _postJsonMap('/apis/storage.k8s.io/v1/csidrivers?pretty=$pretty');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// read the specified CSIDriver
  ///
  /// [name] name of the CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> readStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name?pretty=$pretty');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// delete a CSIDriver
  ///
  /// [name] name of the CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> deleteStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name?pretty=$pretty');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// replace the specified CSIDriver
  ///
  /// [name] name of the CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> replaceStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name?pretty=$pretty');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// partially update the specified CSIDriver
  ///
  /// [name] name of the CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> patchStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name?pretty=$pretty');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// list or watch objects of kind CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINodeList> listStorageV1CSINode({
    bool? pretty,
  }) async {
    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csinodes?pretty=$pretty');
    return api_storage_v1.CSINodeList.fromJson(result);
  }

  /// delete collection of CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionCSINode({
    bool? pretty,
  }) async {
    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/csinodes?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> createStorageV1CSINode({
    bool? pretty,
  }) async {
    final result =
        await _postJsonMap('/apis/storage.k8s.io/v1/csinodes?pretty=$pretty');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// read the specified CSINode
  ///
  /// [name] name of the CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> readStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name?pretty=$pretty');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// delete a CSINode
  ///
  /// [name] name of the CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> deleteStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name?pretty=$pretty');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// replace the specified CSINode
  ///
  /// [name] name of the CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> replaceStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name?pretty=$pretty');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// partially update the specified CSINode
  ///
  /// [name] name of the CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> patchStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name?pretty=$pretty');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// list or watch objects of kind StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClassList> listStorageV1StorageClass({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses?pretty=$pretty');
    return api_storage_v1.StorageClassList.fromJson(result);
  }

  /// delete collection of StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionStorageClass({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> createStorageV1StorageClass({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses?pretty=$pretty');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// read the specified StorageClass
  ///
  /// [name] name of the StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> readStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name?pretty=$pretty');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// delete a StorageClass
  ///
  /// [name] name of the StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> deleteStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name?pretty=$pretty');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// replace the specified StorageClass
  ///
  /// [name] name of the StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> replaceStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name?pretty=$pretty');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// partially update the specified StorageClass
  ///
  /// [name] name of the StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> patchStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name?pretty=$pretty');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// list or watch objects of kind VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachmentList> listStorageV1VolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments?pretty=$pretty');
    return api_storage_v1.VolumeAttachmentList.fromJson(result);
  }

  /// delete collection of VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionVolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> createStorageV1VolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// read the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> readStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// delete a VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> deleteStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// replace the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> replaceStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// partially update the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> patchStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// read status of the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> readStorageV1VolumeAttachmentStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// replace status of the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment>
      replaceStorageV1VolumeAttachmentStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// partially update status of the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> patchStorageV1VolumeAttachmentStatus({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status?pretty=$pretty');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSIDriverList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csidrivers?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CSIDriver. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CSIDriver
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSIDriver({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csidrivers/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of CSINode. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSINodeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csinodes?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CSINode. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CSINode
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSINode({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csinodes/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of StorageClass. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1StorageClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/storageclasses?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind StorageClass. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the StorageClass
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1StorageClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/storageclasses/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1VolumeAttachmentList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/volumeattachments?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1VolumeAttachment({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/volumeattachments/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getStorageV1alpha1APIResources() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CSIStorageCapacity
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_storage_v1alpha1.CSIStorageCapacityList>
      listStorageV1alpha1CSIStorageCapacityForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_storage_v1alpha1.CSIStorageCapacityList.fromJson(result);
  }

  /// list or watch objects of kind CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.CSIStorageCapacityList>
      listStorageV1alpha1NamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return api_storage_v1alpha1.CSIStorageCapacityList.fromJson(result);
  }

  /// delete collection of CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1alpha1CollectionNamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.CSIStorageCapacity>
      createStorageV1alpha1NamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return api_storage_v1alpha1.CSIStorageCapacity.fromJson(result);
  }

  /// read the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.CSIStorageCapacity>
      readStorageV1alpha1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1alpha1.CSIStorageCapacity.fromJson(result);
  }

  /// delete a CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1alpha1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.CSIStorageCapacity>
      replaceStorageV1alpha1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1alpha1.CSIStorageCapacity.fromJson(result);
  }

  /// partially update the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.CSIStorageCapacity>
      patchStorageV1alpha1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1alpha1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1alpha1.CSIStorageCapacity.fromJson(result);
  }

  /// list or watch objects of kind VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachmentList>
      listStorageV1alpha1VolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachmentList.fromJson(result);
  }

  /// delete collection of VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1alpha1CollectionVolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachment>
      createStorageV1alpha1VolumeAttachment({
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachment.fromJson(result);
  }

  /// read the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachment>
      readStorageV1alpha1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachment.fromJson(result);
  }

  /// delete a VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachment>
      deleteStorageV1alpha1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachment.fromJson(result);
  }

  /// replace the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachment>
      replaceStorageV1alpha1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachment.fromJson(result);
  }

  /// partially update the specified VolumeAttachment
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1alpha1.VolumeAttachment>
      patchStorageV1alpha1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1alpha1/volumeattachments/$name?pretty=$pretty');
    return api_storage_v1alpha1.VolumeAttachment.fromJson(result);
  }

  /// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1alpha1CSIStorageCapacityListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/watch/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1alpha1NamespacedCSIStorageCapacityList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/watch/namespaces/$namespace/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1alpha1NamespacedCSIStorageCapacity({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/watch/namespaces/$namespace/csistoragecapacities/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1alpha1VolumeAttachmentList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/watch/volumeattachments?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind VolumeAttachment. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the VolumeAttachment
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1alpha1VolumeAttachment({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1alpha1/watch/volumeattachments/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get available resources
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getStorageV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// list or watch objects of kind CSIStorageCapacity
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_storage_v1beta1.CSIStorageCapacityList>
      listStorageV1beta1CSIStorageCapacityForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return api_storage_v1beta1.CSIStorageCapacityList.fromJson(result);
  }

  /// list or watch objects of kind CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1beta1.CSIStorageCapacityList>
      listStorageV1beta1NamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return api_storage_v1beta1.CSIStorageCapacityList.fromJson(result);
  }

  /// delete collection of CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1beta1CollectionNamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// create a CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1beta1.CSIStorageCapacity>
      createStorageV1beta1NamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities?pretty=$pretty');
    return api_storage_v1beta1.CSIStorageCapacity.fromJson(result);
  }

  /// read the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1beta1.CSIStorageCapacity>
      readStorageV1beta1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1beta1.CSIStorageCapacity.fromJson(result);
  }

  /// delete a CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1beta1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// replace the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1beta1.CSIStorageCapacity>
      replaceStorageV1beta1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1beta1.CSIStorageCapacity.fromJson(result);
  }

  /// partially update the specified CSIStorageCapacity
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1beta1.CSIStorageCapacity>
      patchStorageV1beta1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities/$name?pretty=$pretty');
    return api_storage_v1beta1.CSIStorageCapacity.fromJson(result);
  }

  /// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1CSIStorageCapacityListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch individual changes to a list of CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1NamespacedCSIStorageCapacityList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/namespaces/$namespace/csistoragecapacities?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// watch changes to an object of kind CSIStorageCapacity. deprecated: use the 'watch' parameter with a list operation instead, filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] allowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] name of the CSIStorageCapacity
  ///
  /// [namespace] object name and auth scope, such as for teams and projects
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [resourceVersionMatch] resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1NamespacedCSIStorageCapacity({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/namespaces/$namespace/csistoragecapacities/$name?allowWatchBookmarks=$allowWatchBookmarks&continue=${$continue}&fieldSelector=$fieldSelector&labelSelector=$labelSelector&limit=$limit&pretty=$pretty&resourceVersion=$resourceVersion&resourceVersionMatch=$resourceVersionMatch&timeoutSeconds=$timeoutSeconds&watch=$watch');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// get service account issuer OpenID JSON Web Key Set (contains public token verification keys)
  Future<String> getServiceAccountIssuerOpenIDKeyset() async {
    final result = await _getJsonString('/openid/v1/jwks/');
    return result;
  }

  /// get the code version
  Future<apimachinery_pkg_version.Info> getCodeVersion() async {
    final result = await _getJsonMap('/version/');
    return apimachinery_pkg_version.Info.fromJson(result);
  }
}

// String getHeader(Object body) {
//   if (body is Patch) {
//     return getPatchHeader(body);
//   }

//   return 'application/json; charset=utf-8';
// }

// String getPatchHeader(Patch body) {
//   switch (body.type) {
//     case PatchType.jsonPatch:
//       return 'application/json-patch+json; charset=utf-8';
//     case PatchType.mergePatch:
//       return 'application/merge-patch+json; charset=utf-8';
//     case PatchType.strategicMergePatch:
//       return 'application/strategic-merge-patch+json; charset=utf-8';
//     case PatchType.applyPatch:
//       return 'application/apply-patch+yaml; charset=utf-8';
//     default:
//       throw Exception(body.type);
//   }
// }
